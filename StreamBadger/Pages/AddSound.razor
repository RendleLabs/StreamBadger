@page "/AddSound"
@using System.IO
@inject SoundTemp _soundTemp
@inject SoundStore _soundStore;
@inject IJSRuntime JS
@inject NavigationManager _navigation;

<div class="container-fluid">
    <div class="row">
        <EditForm Model="@_model" OnValidSubmit="SubmitSound" class="form">
            <div class="mb-3">
                <InputFile OnChange="@OnInputFileChange" class="form-control-file" required></InputFile>
            </div>
            <div class="mb-3">
                <label class="form-label">Name:</label>
                <InputText class="form-control" @bind-Value="_model.Name" required></InputText>
            </div>
            <div class="mb-3">
                <label for="volume" class="form-label">Volume:</label>
                <input type="range" @bind-value="_model.Volume" class="form-range" min="0" max="1" step="0.1" id="volume">
            </div>
            <div class="mb-3">
                <button class="btn btn-secondary" type="button" @onclick="PlaySound">Play</button>
            </div>
            <div class="mb-3">
                <button class="btn btn-success" type="submit">Save</button>
            </div>
        </EditForm>
    </div>
</div>

@if (_tempFileName is {Length: > 0})
{
    <audio id="temp_sound" src="http://localhost:25293/temp/sounds/@_tempFileName"></audio>
}

@code {

    const long MaxUploadSize = 1024 * 1024 * 4;

    private UploadSoundModel _model = new();
    IBrowserFile _file;
    private string _tempFileName;

    private async Task SubmitSound()
    {
        await _soundStore.AddAsync(_tempFileName, _model);
        _navigation.NavigateTo("/");
    }

    private async Task PlaySound()
    {
        if (_tempFileName is null) return;
        await JS.InvokeVoidAsync("playSound", "temp_sound", _model.Volume);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs arg)
    {
        _file = arg.File;
        using (var stream = _file.OpenReadStream())
        {
            _tempFileName = await _soundTemp.StoreAsync(stream, _file.ContentType);
        }
        await InvokeAsync(StateHasChanged);
    }

}