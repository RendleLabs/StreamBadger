@page "/Settings"
@inject SettingsStore SettingsStore
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-8 offset-2">
			<EditForm Model="@Model" class="form" OnValidSubmit="OnSubmit">
                <div class="mb-3">
                    <label for="port" class="form-label">Server Port:</label>
                    <InputNumber @bind-Value="Model.Port" class="form-control"/>
                </div>
                <h2>OBS WebSockets</h2>
                <div class="mb-3">
                    <label for="obs-bs-name" class="form-label">OBS Browser Source Name:</label>
                    <InputText @bind-Value="Model.ObsBrowserSourceName" type="text" class="form-control" id="obs-bs-name"/>
                </div>
                <div class="mb-3">
                    <label for="obs-port" class="form-label">OBS Port:</label>
                    <InputNumber @bind-Value="Model.ObsWebSocketsPort" class="form-control" id="obs-port"/>
                </div>
                <div class="mb-3">
                    <label for="obs-password" class="form-label">OBS Password:</label>
                    <InputText @bind-Value="Model.ObsWebSocketsPassword" type="password" class="form-control" id="obs-password"/>
                </div>
                <div>
                    <button type="submit" class="btn btn-outline-success">Save</button>
                    <button type="button" class="btn btn-outline-secondary">Cancel</button>
                </div>
			</EditForm>
        </div>
    </div>
</div>

@code {

    public SettingsModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Model = await SettingsStore.LoadAsync();
    }

    private async Task OnSubmit()
    {
        await SettingsStore.SaveAsync(Model);
        NavigationManager.NavigateTo("/");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
